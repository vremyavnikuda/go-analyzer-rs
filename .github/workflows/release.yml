name: Release

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: go-analyzer-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: go-analyzer-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: go-analyzer-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: go-analyzer-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/go-analyzer artifacts/${{ matrix.artifact_name }}
          chmod +x artifacts/${{ matrix.artifact_name }}

      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\go-analyzer.exe artifacts\${{ matrix.artifact_name }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GOANALYZER_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream

#   publish-crate:
#     name: Publish to crates.io
#     runs-on: ubuntu-latest
#     needs: build-binaries
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Install Rust toolchain
#         uses: actions-rs/toolchain@v1
#         with:
#           toolchain: stable
#           profile: minimal
#           override: true

#       - name: Cache Rust dependencies
#         uses: actions/cache@v3
#         with:
#           path: |
#             ~/.cargo/registry
#             ~/.cargo/git
#             target
#           key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

#       - name: Publish to crates.io
#         run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

#   publish-vscode-extension:
#     name: Publish VS Code Extension
#     runs-on: ubuntu-latest
#     needs: build-binaries
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "18"
#           cache: "npm"
#           cache-dependency-path: vscode/package-lock.json

#       - name: Install VS Code extension dependencies
#         run: |
#           cd vscode
#           npm ci

#       - name: Compile TypeScript
#         run: |
#           cd vscode
#           npm run compile

#       - name: Install vsce
#         run: npm install -g vsce

#       - name: Package extension
#         run: |
#           cd vscode
#           vsce package

#       - name: Publish to VS Code Marketplace
#         run: |
#           cd vscode
#           vsce publish -p ${{ secrets.VSCE_TOKEN }}
